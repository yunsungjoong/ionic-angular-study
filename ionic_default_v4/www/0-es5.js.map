{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-action-sheet-controller_8.entry.js"],"names":["ActionSheetController","hostRef","options","data","role","id","document","AlertController","Anchor","routerDirection","onClick","ev","href","console","warn","mode","attrs","rel","Object","assign","color","LoadingController","ModalController","PickerController","PopoverController","ToastController"],"mappings":"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","file":"0-es5.js","sourcesContent":["import { r as registerInstance, c as getIonMode, h, H as Host } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst ActionSheetController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an action sheet overlay with action sheet options.\n     *\n     * @param options The options to use to create the action sheet.\n     */\n    create(options) {\n        return createOverlay('ion-action-sheet', options);\n    }\n    /**\n     * Dismiss the open action sheet overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the action sheet.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the action sheet.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n    }\n    /**\n     * Get the most recently opened action sheet overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-action-sheet');\n    }\n};\n\nconst AlertController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create an alert overlay with alert options.\n     *\n     * @param options The options to use to create the alert.\n     */\n    create(options) {\n        return createOverlay('ion-alert', options);\n    }\n    /**\n     * Dismiss the open alert overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the alert.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the alert.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-alert', id);\n    }\n    /**\n     * Get the most recently opened alert overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-alert');\n    }\n};\n\nconst Anchor = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\n};\n\nconst LoadingController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a loading overlay with loading options.\n     *\n     * @param options The options to use to create the loading.\n     */\n    create(options) {\n        return createOverlay('ion-loading', options);\n    }\n    /**\n     * Dismiss the open loading overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-loading', id);\n    }\n    /**\n     * Get the most recently opened loading overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-loading');\n    }\n};\n\nconst ModalController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a modal overlay with modal options.\n     *\n     * @param options The options to use to create the modal.\n     */\n    create(options) {\n        return createOverlay('ion-modal', options);\n    }\n    /**\n     * Dismiss the open modal overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the modal.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-modal', id);\n    }\n    /**\n     * Get the most recently opened modal overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-modal');\n    }\n};\n\nconst PickerController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a picker overlay with picker options.\n     *\n     * @param options The options to use to create the picker.\n     */\n    create(options) {\n        return createOverlay('ion-picker', options);\n    }\n    /**\n     * Dismiss the open picker overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-picker', id);\n    }\n    /**\n     * Get the most recently opened picker overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-picker');\n    }\n};\n\nconst PopoverController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a popover overlay with popover options.\n     *\n     * @param options The options to use to create the popover.\n     */\n    create(options) {\n        return createOverlay('ion-popover', options);\n    }\n    /**\n     * Dismiss the open popover overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the popover.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the popover.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-popover', id);\n    }\n    /**\n     * Get the most recently opened popover overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-popover');\n    }\n};\n\nconst ToastController = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    /**\n     * Create a toast overlay with toast options.\n     *\n     * @param options The options to use to create the toast.\n     */\n    create(options) {\n        return createOverlay('ion-toast', options);\n    }\n    /**\n     * Dismiss the open toast overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n     */\n    dismiss(data, role, id) {\n        return dismissOverlay(document, data, role, 'ion-toast', id);\n    }\n    /**\n     * Get the most recently opened toast overlay.\n     */\n    async getTop() {\n        return getOverlay(document, 'ion-toast');\n    }\n};\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\n"]}