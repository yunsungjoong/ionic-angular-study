{"version":3,"file":"events.d.ts","sources":["events.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["export declare type EventHandler = (...args: any[]) => any;\nexport declare class Events {\n    private c;\n    constructor();\n    /**\n     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.\n     *\n     * @param topic the topic to subscribe to\n     * @param handler the event handler\n     */\n    subscribe(topic: string, ...handlers: EventHandler[]): void;\n    /**\n     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.\n     *\n     * @param topic the topic to unsubscribe from\n     * @param handler the event handler\n     *\n     * @return true if a handler was removed\n     */\n    unsubscribe(topic: string, handler?: EventHandler): boolean;\n    /**\n     * Publish an event to the given topic.\n     *\n     * @param topic the topic to publish to\n     * @param eventData the data to send as the event\n     */\n    publish(topic: string, ...args: any[]): any[] | null;\n}\n"]}