{"version":3,"sources":["../../../projects/ngx-pinch-zoom/src/lib/properties.ts","../../../projects/ngx-pinch-zoom/src/lib/touches.ts","../../../projects/ngx-pinch-zoom/src/lib/ivypinch.ts","../../../projects/ngx-pinch-zoom/src/lib/pinch-zoom.component.ts","../../../projects/ngx-pinch-zoom/src/lib/pinch-zoom.module.ts"],"names":["defaultProperties","transitionDuration","doubleTap","doubleTapScale","limitZoom","autoZoomOut","zoomControlScale","minPanScale","minScale","listeners","wheel","wheelZoomFactor","draggableImage","backwardCompatibilityProperties","transition-duration","transitionDurationBackwardCompatibility","double-tap","doubleTapBackwardCompatibility","double-tap-scale","doubleTapScaleBackwardCompatibility","auto-zoom-out","autoZoomOutBackwardCompatibility","limit-zoom","limitZoomBackwardCompatibility","Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","detectLinearSwipe","swipeType","handleLinearSwipe","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","prototype","touchListeners","mouseListeners","otherListeners","destroy","action","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","IvyPinch","scale","initialScale","moveX","moveY","initialMoveX","initialMoveY","moveXC","moveYC","draggingMode","distance","initialDistance","events","defaultMaxScale","type","alignImage","updateInitialValues","handlePan","disablePan","preventDefault","_a","getClientPosition","limitPan","limitPanY","limitPanX","centeringImage","transformElement","handleDoubleTap","toggleZoom","handlePinch","getDistance","moveLeft0","moveLeft1","moveTop0","moveTop1","handleLimitZoom","zoomFactor","deltaY","newScale","maxScale","xCenter","yCenter","setZoom","center","_event","setAutoHeight","elementTarget","querySelector","tagName","parentElement","detectLimitZoom","autoHeight","setBasicStyles","getPropertiesValue","fullImage","imageWidth","getImageWidth","imageHeight","getImageHeight","enlargedImageWidth","enlargedImageHeight","moveXRatio","moveYRatio","newImageWidth","newImageHeight","img","getElementsByTagName","offsetWidth","imgHeight","scaledImgHeight","parentHeight","offsetHeight","elementHeight","imgOffsetTop","imgWidth","scaledImgWidth","parentWidth","elementWidth","imgOffsetLeft","style","display","alignItems","justifyContent","transformOrigin","setImageSize","setDraggableImage","removeBasicStyles","removeImageSize","removeDraggableImage","imgElement","getImageElement","draggable","maxWidth","maxHeight","sizeRatio","getAttribute","resetScale","sqrt","pow","pageX","pageY","duration","transition","transform","Number","isTouchScreen","getMatchMedia","isDragging","pollLimitZoomForOriginalImage","poll","setInterval","maxScaleForOriginalImage","getMaxScaleForOriginalImage","clearInterval","naturalWidth","changedTouches","visibleAreaWidth","visibleAreaHeight","scalingPercent","propertyName","_defaultComponentProperties","overflow","disableZoomControl","backgroundColor","PinchZoomComponent","elementRef","defaultComponentProperties","getDefaultComponentProperties","applyPropertiesDefault","_properties","value","_transitionDuration","_doubleTap","_doubleTapScale","_autoZoomOut","_limitZoom","pinchZoom","round","_zoomControlScale","ngOnInit","initPinchZoom","ngOnChanges","changes","changedProperties","getProperties","renameProperties","ngOnDestroy","nativeElement","prop","currentValue","isControl","isDisabled","Component","args","selector","exportAs","template","ElementRef","Input","HostBinding","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents"],"mappings":"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","sourcesContent":["import {Properties} from './interfaces';\n\nexport const defaultProperties:Properties = {\n    transitionDuration: 200,\n    doubleTap: true,\n    doubleTapScale: 2,\n    limitZoom: \"original image size\",\n    autoZoomOut: false,\n    zoomControlScale: 1,\n    minPanScale: 1.0001,\n    minScale: 0,\n    listeners: \"mouse and touch\",\n    wheel: true,\n    wheelZoomFactor: 0.2,\n    draggableImage: false\n}\n\nexport const backwardCompatibilityProperties:any = {\n    \"transition-duration\": \"transitionDuration\",\n    \"transitionDurationBackwardCompatibility\": \"transitionDuration\",\n    \"double-tap\": \"doubleTap\",\n    \"doubleTapBackwardCompatibility\": \"doubleTap\",\n    \"double-tap-scale\": \"doubleTapScale\",\n    \"doubleTapScaleBackwardCompatibility\": \"doubleTapScale\",\n    \"auto-zoom-out\": \"autoZoomOut\",\n    \"autoZoomOutBackwardCompatibility\": \"autoZoomOut\",\n    \"limit-zoom\": \"limitZoom\",\n    \"limitZoomBackwardCompatibility\": \"limitZoom\"\n}","export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", {});\r\n            } else {\r\n                this.runHandler(\"longtap\", {});\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","import {Touches} from './touches';\nimport {Properties} from './interfaces';\nimport {defaultProperties} from './properties';\n\ntype PropertyName = keyof Properties;\n\nexport class IvyPinch {\n    properties: Properties = defaultProperties;\n    touches: any;\n    element: any;\n    elementTarget: any;\n    parentElement: any;\n    i: number = 0;\n    public scale: number = 1;\n    initialScale: number = 1;\n    elementPosition: any;\n    eventType: any;\n    startX: number = 0;\n    startY: number = 0;\n    moveX: number = 0;\n    moveY: number = 0;\n    initialMoveX: number = 0;\n    initialMoveY: number = 0;\n    moveXC: number = 0;\n    moveYC: number = 0;\n    lastTap: number = 0;\n    draggingMode: boolean = false;\n    distance: number = 0;\n    doubleTapTimeout: number = 0;\n    initialDistance: number = 0;\n    events: any = {};\n    maxScale!: number;\n    defaultMaxScale: number = 3;\n\n    // Minimum scale at which panning works\n    get minPanScale() {\n        return this.getPropertiesValue(\"minPanScale\");\n    }\n\n    get fullImage() {\n        return this.properties.fullImage;\n    }\n\n    constructor(properties: any) {\n        this.element = properties.element;\n\n        if (!this.element) {\n            return;\n        }\n\n        this.elementTarget = this.element.querySelector('*').tagName;\n        this.parentElement = this.element.parentElement;\n        this.properties = Object.assign({}, defaultProperties, properties);\n        this.detectLimitZoom();\n\n        this.touches = new Touches({\n            element: properties.element,\n            listeners: properties.listeners,\n            resize: properties.autoHeight,\n            mouseListeners: {\n                \"mousedown\": \"handleMousedown\",\n                \"mouseup\": \"handleMouseup\",\n                \"wheel\": \"handleWheel\"\n            }\n        });\n\n\n        /* Init */\n        this.setBasicStyles();\n\n        /*\n         * Listeners\n         */\n\n        this.touches.on('touchstart', this.handleTouchstart);\n        this.touches.on('touchend', this.handleTouchend);\n        this.touches.on('mousedown', this.handleTouchstart);\n        this.touches.on('mouseup', this.handleTouchend);\n        this.touches.on('pan', this.handlePan);\n        this.touches.on('mousemove', this.handlePan);\n        this.touches.on('pinch', this.handlePinch);\n\n        if (this.properties.wheel) {\n            this.touches.on('wheel', this.handleWheel);\n        }\n\n        if (this.properties.doubleTap) {\n            this.touches.on('double-tap', this.handleDoubleTap);\n        }\n\n        if (this.properties.autoHeight) {\n            this.touches.on('resize', this.handleResize);\n        }\n    }\n\n\n    /* Touchstart */\n\n    handleTouchstart = (event: any) => {\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\n        this.getElementPosition();\n\n        if (this.eventType === undefined) {\n            this.getTouchstartPosition(event);\n        }\n    }\n\n\n    /* Touchend */\n\n    handleTouchend = (event: any) => {\n\n        /* touchend */\n        if (event.type === \"touchend\") {\n            this.i = 0;\n            this.draggingMode = false;\n            const touches = event.touches;\n\n            // Min scale\n            if (this.scale < 1) {\n                this.scale = 1;\n            }\n\n            // Auto Zoom Out\n            if (this.properties.autoZoomOut && this.eventType === 'pinch') {\n                this.scale = 1;\n            }\n\n            // Align image\n            if (this.eventType === 'pinch' || \n                this.eventType === 'pan' && this.scale > this.minPanScale) {\n\n                this.alignImage();\n            }\n\n            // Update initial values\n            if (this.eventType === 'pinch' ||\n                this.eventType === 'pan' ||\n                this.eventType === 'horizontal-swipe' ||\n                this.eventType === 'vertical-swipe') {\n\n                this.updateInitialValues();\n            }\n\n            this.eventType = 'touchend';\n\n            if (touches && touches.length === 0) {\n                this.eventType = undefined;\n            }\n        }\n\n        /* mouseup */\n        if (event.type === \"mouseup\") {\n            this.draggingMode = false;\n            this.updateInitialValues();\n            this.eventType = undefined;\n        }\n\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\n    }\n\n\n    /*\n     * Handlers\n     */\n\n    handlePan = (event: any) => {\n        if (this.scale < this.minPanScale || this.properties.disablePan) {\n            return;\n        }\n\n        event.preventDefault();\n        const {\n            clientX,\n            clientY\n        } = this.getClientPosition(event);\n\n        if (!this.eventType) {\n            this.startX = clientX - this.elementPosition.left;\n            this.startY = clientY - this.elementPosition.top;\n        }\n\n        this.eventType = 'pan';\n        this.moveX = this.initialMoveX + (this.moveLeft(event, 0) - this.startX);\n        this.moveY = this.initialMoveY + (this.moveTop(event, 0) - this.startY);\n\n        if (this.properties.limitPan) {\n            this.limitPanY();\n            this.limitPanX();\n        }\n\n        /* mousemove */\n        if (event.type === \"mousemove\" && this.scale > this.minPanScale) {\n            this.centeringImage();\n        }\n\n        this.transformElement(0);\n    }\n\n    handleDoubleTap = (event: any) => {\n        this.toggleZoom(event);\n        return;\n    }\n\n    handlePinch = (event: any) => {\n        event.preventDefault();\n\n        if (this.eventType === undefined || this.eventType === 'pinch') {\n            const touches = event.touches;\n\n            if (!this.eventType) {\n                this.initialDistance = this.getDistance(touches);\n\n                const moveLeft0 = this.moveLeft(event, 0);\n                const moveLeft1 = this.moveLeft(event, 1);\n                const moveTop0 = this.moveTop(event, 0);\n                const moveTop1 = this.moveTop(event, 1);\n\n                this.moveXC = ((moveLeft0 + moveLeft1) / 2) - this.initialMoveX;\n                this.moveYC = ((moveTop0 + moveTop1) / 2) - this.initialMoveY;\n            }\n\n            this.eventType = 'pinch';\n            this.distance = this.getDistance(touches);\n            this.scale = this.initialScale * (this.distance / this.initialDistance);\n            this.moveX = this.initialMoveX - (((this.distance / this.initialDistance) * this.moveXC) - this.moveXC);\n            this.moveY = this.initialMoveY - (((this.distance / this.initialDistance) * this.moveYC) - this.moveYC);\n\n            this.handleLimitZoom();\n\n            if (this.properties.limitPan) {\n                this.limitPanY();\n                this.limitPanX();\n            }\n\n            this.transformElement(0);\n        }\n    }\n\n\n    handleWheel = (event: any) => {\n        event.preventDefault();\n\n        let wheelZoomFactor = this.properties.wheelZoomFactor || 0;\n        let zoomFactor = event.deltaY < 0 ? (wheelZoomFactor) : (- wheelZoomFactor);\n        let newScale = this.initialScale + zoomFactor;\n\n        /* Round value */\n        if (newScale < (1 + wheelZoomFactor)) {\n            newScale = 1;\n        } else if (newScale < this.maxScale && newScale > this.maxScale - wheelZoomFactor) {\n            newScale = this.maxScale;\n        }\n\n        if (newScale < 1 || newScale > this.maxScale) {\n            return;\n        }\n\n        if (newScale === this.scale) {\n            return;\n        }\n\n        this.getElementPosition();\n        this.scale = newScale;\n\n        /* Get cursor position over image */\n        let xCenter = (event.clientX - this.elementPosition.left) - this.initialMoveX;\n        let yCenter = (event.clientY - this.elementPosition.top) - this.initialMoveY;\n\n        this.setZoom({\n            scale: newScale,\n            center: [xCenter, yCenter]\n        });\n    }\n\n    handleResize = (_event: any) => {\n        this.setAutoHeight();\n    }\n\n    handleLimitZoom() {\n        const limitZoom = this.maxScale;\n        const minScale = this.properties.minScale || 0;\n\n        if (this.scale > limitZoom || this.scale <= minScale) {\n            const imageWidth = this.getImageWidth();\n            const imageHeight = this.getImageHeight();\n            const enlargedImageWidth = imageWidth * this.scale;\n            const enlargedImageHeight = imageHeight * this.scale;\n            const moveXRatio = this.moveX / (enlargedImageWidth - imageWidth);\n            const moveYRatio = this.moveY / (enlargedImageHeight - imageHeight);\n\n            if (this.scale > limitZoom) {\n                this.scale = limitZoom;\n            }\n\n            if (this.scale <= minScale) {\n                this.scale = minScale;\n            }\n\n            const newImageWidth = imageWidth * this.scale;\n            const newImageHeight = imageHeight * this.scale;\n\n            this.moveX = -Math.abs((moveXRatio * (newImageWidth - imageWidth)));\n            this.moveY = -Math.abs((-moveYRatio * (newImageHeight - imageHeight)));\n        }\n    }\n\n    moveLeft(event: any, index: number = 0) {\n        const clientX = this.getClientPosition(event, index).clientX;\n        return clientX - this.elementPosition.left;\n    }\n\n    moveTop(event: any, index: number = 0) {\n        const clientY = this.getClientPosition(event, index).clientY;\n        return clientY - this.elementPosition.top;\n    }\n\n\n    /*\n     * Detection\n     */\n\n    centeringImage() {\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\n        const initialMoveX = this.moveX;\n        const initialMoveY = this.moveY;\n\n        if (this.moveY > 0) {\n            this.moveY = 0;\n        }\n        if (this.moveX > 0) {\n            this.moveX = 0;\n        }\n\n        if (img) {\n            this.limitPanY();\n            this.limitPanX();\n        }\n        if (img && this.scale < 1) {\n            if (this.moveX < this.element.offsetWidth * (1 - this.scale)) {\n                this.moveX = this.element.offsetWidth * (1 - this.scale);\n            }\n        }\n\n        return initialMoveX !== this.moveX || initialMoveY !== this.moveY;\n    }\n\n    limitPanY() {\n        const imgHeight = this.getImageHeight();\n        const scaledImgHeight = imgHeight * this.scale;\n        const parentHeight = this.parentElement.offsetHeight;\n        const elementHeight = this.element.offsetHeight;\n\n        if (scaledImgHeight < parentHeight) {\n            this.moveY = (parentHeight - elementHeight * this.scale) / 2;\n        } else {\n            const imgOffsetTop = ((imgHeight - elementHeight) * this.scale) / 2;\n\n            if (this.moveY > imgOffsetTop) {\n                this.moveY = imgOffsetTop;\n            } else if ((scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight) + this.moveY < 0) {\n                this.moveY = -(scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight);\n            }\n        }\n    }\n\n    limitPanX() {\n        const imgWidth = this.getImageWidth();\n        const scaledImgWidth = imgWidth * this.scale;\n        const parentWidth = this.parentElement.offsetWidth;\n        const elementWidth = this.element.offsetWidth;\n\n        if (scaledImgWidth < parentWidth) {\n            this.moveX = (parentWidth - elementWidth * this.scale) / 2;\n        } else {\n            const imgOffsetLeft = ((imgWidth - elementWidth) * this.scale) / 2;\n\n            if (this.moveX > imgOffsetLeft) {\n                this.moveX = imgOffsetLeft;\n            } else if ((scaledImgWidth + Math.abs(imgOffsetLeft) - parentWidth) + this.moveX < 0) {\n                this.moveX = -(imgWidth * this.scale + Math.abs(imgOffsetLeft) - parentWidth);\n            }\n        }\n    }\n\n    setBasicStyles() {\n        this.element.style.display = 'flex';\n        this.element.style.alignItems = 'center';\n        this.element.style.justifyContent = 'center';\n        this.element.style.transformOrigin = '0 0';\n        this.setImageSize();\n        this.setDraggableImage();\n    }\n\n    removeBasicStyles() {\n        this.element.style.display = '';\n        this.element.style.alignItems = '';\n        this.element.style.justifyContent = '';\n        this.element.style.transformOrigin = '';\n        this.removeImageSize();\n        this.removeDraggableImage();\n    }\n\n    setDraggableImage() {\n        const imgElement = this.getImageElement();\n\n        if (imgElement) {\n            imgElement.draggable = this.properties.draggableImage;\n        }\n    }\n\n    removeDraggableImage() {\n        const imgElement = this.getImageElement();\n\n        if (imgElement) {\n            imgElement.draggable = true;\n        }\n    }\n\n    setImageSize() {\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\n\n        if (imgElement.length) {\n            imgElement[0].style.maxWidth = '100%';\n            imgElement[0].style.maxHeight = '100%';\n\n            this.setAutoHeight();\n        }\n    }\n\n    setAutoHeight() {\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\n\n        if (!this.properties.autoHeight || !imgElement.length) {\n            return;\n        }\n\n        const imgNaturalWidth = imgElement[0].getAttribute(\"width\");\n        const imgNaturalHeight = imgElement[0].getAttribute(\"height\");\n        const sizeRatio = imgNaturalWidth / imgNaturalHeight;\n        const parentWidth = this.parentElement.offsetWidth;\n\n        imgElement[0].style.maxHeight = parentWidth / sizeRatio + \"px\";\n    }\n\n    removeImageSize() {\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\n\n        if (imgElement.length) {\n            imgElement[0].style.maxWidth = '';\n            imgElement[0].style.maxHeight = '';\n        }\n    }\n\n    getElementPosition() {\n        this.elementPosition = this.element.parentElement.getBoundingClientRect();\n    }\n\n    getTouchstartPosition(event: any) {\n        const {\n            clientX,\n            clientY\n        } = this.getClientPosition(event);\n\n        this.startX = clientX - this.elementPosition.left;\n        this.startY = clientY - this.elementPosition.top;\n    }\n\n    getClientPosition(event: any, index: number = 0) {\n        let clientX;\n        let clientY;\n\n        if (event.type === \"touchstart\" || event.type === \"touchmove\") {\n            clientX = event.touches[index].clientX;\n            clientY = event.touches[index].clientY;\n        }\n        if (event.type === \"mousedown\" || event.type === \"mousemove\") {\n            clientX = event.clientX;\n            clientY = event.clientY;\n        }\n\n        return {\n            clientX,\n            clientY\n        };\n    }\n\n    resetScale() {\n        this.scale = 1;\n        this.moveX = 0;\n        this.moveY = 0;\n        this.updateInitialValues();\n        this.transformElement(this.properties.transitionDuration);\n    }\n\n    updateInitialValues() {\n        this.initialScale = this.scale;\n        this.initialMoveX = this.moveX;\n        this.initialMoveY = this.moveY;\n    }\n\n    getDistance(touches: any) {\n        return Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));\n    }\n\n    getImageHeight() {\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\n        return img.offsetHeight;\n    }\n\n    getImageWidth() {\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\n        return img.offsetWidth;\n    }\n\n    transformElement(duration: any) {\n        this.element.style.transition = \"all \" + duration + \"ms\";\n        this.element.style.transform = \"matrix(\" + Number(this.scale) + \", 0, 0, \" + Number(this.scale) + \", \" + Number(this.moveX) + \", \" + Number(this.moveY) + \")\";\n    }\n\n    isTouchScreen() {\n        const prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n\n        if (('ontouchstart' in window)) {\n            return true;\n        }\n\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n        // https://git.io/vznFH\n        const query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n        return this.getMatchMedia(query);\n    }\n\n    getMatchMedia(query: any) {\n        return window.matchMedia(query).matches;\n    }\n\n    isDragging() {\n        if (this.properties.disablePan) {\n            return false;\n        }\n\n        const imgHeight = this.getImageHeight();\n        const imgWidth = this.getImageWidth();\n\n        if (this.scale > 1) {\n            return imgHeight * this.scale > this.parentElement.offsetHeight ||\n                imgWidth * this.scale > this.parentElement.offsetWidth;\n        }\n        if (this.scale === 1) {\n            return imgHeight > this.parentElement.offsetHeight ||\n                imgWidth > this.parentElement.offsetWidth;\n        }\n\n        return undefined;\n    }\n\n    detectLimitZoom() {\n        this.maxScale = this.defaultMaxScale;\n\n        if (this.properties.limitZoom === \"original image size\" &&\n            this.elementTarget === \"IMG\") {\n            // We are waiting for the element with the image to be available\n            this.pollLimitZoomForOriginalImage();\n        }\n    }\n\n    pollLimitZoomForOriginalImage() {\n        let poll = setInterval(() => {\n            let maxScaleForOriginalImage = this.getMaxScaleForOriginalImage();\n            if (typeof maxScaleForOriginalImage === 'number') {\n                this.maxScale = maxScaleForOriginalImage;\n                clearInterval(poll);\n            }\n        }, 10);\n    }\n\n    getMaxScaleForOriginalImage() {\n        let maxScale!:number;\n        let img = this.element.getElementsByTagName(\"img\")[0];\n\n        if (img.naturalWidth && img.offsetWidth) {\n            maxScale = img.naturalWidth / img.offsetWidth;\n        }\n\n        return maxScale;\n    }\n\n    getImageElement() {\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\n\n        if (imgElement.length) {\n            return imgElement[0];\n        }\n    }\n\n    toggleZoom(event: any = false) {\n        if (this.initialScale === 1) {\n            if (event && event.changedTouches) {\n                if (this.properties.doubleTapScale === undefined) {\n                    return;\n                }\n\n                const changedTouches = event.changedTouches;\n                this.scale = this.initialScale * this.properties.doubleTapScale;\n                this.moveX = this.initialMoveX - (changedTouches[0].clientX - this.elementPosition.left) * (this.properties.doubleTapScale - 1);\n                this.moveY = this.initialMoveY - (changedTouches[0].clientY - this.elementPosition.top) * (this.properties.doubleTapScale - 1);\n            } else {\n                let zoomControlScale = this.properties.zoomControlScale || 0;\n                this.scale = this.initialScale * (zoomControlScale + 1);\n                this.moveX = this.initialMoveX - this.element.offsetWidth * (this.scale - 1) / 2;\n                this.moveY = this.initialMoveY - this.element.offsetHeight * (this.scale - 1) / 2;\n            }\n\n            this.centeringImage();\n            this.updateInitialValues();\n            this.transformElement(this.properties.transitionDuration);\n        } else {\n            this.resetScale();\n        }\n    }\n\n    setZoom(properties: {\n        scale: number,\n        center?: number[]\n    }) {\n        this.scale = properties.scale;\n\n        let xCenter;\n        let yCenter;\n        let visibleAreaWidth = this.element.offsetWidth;\n        let visibleAreaHeight = this.element.offsetHeight;\n        let scalingPercent = (visibleAreaWidth * this.scale) / (visibleAreaWidth * this.initialScale);\n\n        if (properties.center) {\n            xCenter = properties.center[0];\n            yCenter = properties.center[1];\n        } else {\n            xCenter = visibleAreaWidth / 2 - this.initialMoveX;\n            yCenter = visibleAreaHeight / 2 - this.initialMoveY;\n        }\n\n        this.moveX = this.initialMoveX - ((scalingPercent * xCenter) - xCenter);\n        this.moveY = this.initialMoveY - ((scalingPercent * yCenter) - yCenter);\n\n        this.centeringImage();\n        this.updateInitialValues();\n        this.transformElement(this.properties.transitionDuration);\n    }\n\n    alignImage() {\n        const isMoveChanged = this.centeringImage();\n\n        if (isMoveChanged) {\n            this.updateInitialValues();\n            this.transformElement(this.properties.transitionDuration);\n        }\n    }\n\n    destroy() {\n        this.removeBasicStyles();\n        this.touches.destroy();\n    }\n\n    getPropertiesValue(propertyName:PropertyName) {\n        if (this.properties && this.properties[propertyName]) {\n            return this.properties[propertyName]\n        } else {\n            return defaultProperties[propertyName];\n        }\n    }\n}","import {ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, OnDestroy, SimpleChanges} from '@angular/core';\r\n\r\nimport {Properties} from './interfaces';\r\nimport {defaultProperties, backwardCompatibilityProperties} from './properties';\r\nimport {IvyPinch} from './ivypinch';\r\n\r\ninterface ComponentProperties extends Properties {\r\n    disabled?:boolean;\r\n    overflow?: \"hidden\" | \"visible\";\r\n    disableZoomControl?: \"disable\" | \"never\" | \"auto\";\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport const _defaultComponentProperties:ComponentProperties = {\r\n    overflow: \"hidden\",\r\n    disableZoomControl: \"auto\",\r\n    backgroundColor: \"rgba(0,0,0,0.85)\"\r\n}\r\n\r\ntype PropertyName = keyof ComponentProperties;\r\n\r\n@Component({\r\n\tselector: 'pinch-zoom, [pinch-zoom]',\r\n    exportAs: 'pinchZoom',\r\n    templateUrl: './pinch-zoom.component.html',\r\n    styleUrls: ['./pinch-zoom.component.sass']\r\n})\r\n\r\nexport class PinchZoomComponent implements OnDestroy {\r\n    pinchZoom: any;\r\n    _properties!: ComponentProperties;\r\n    defaultComponentProperties!: ComponentProperties;\r\n    zoomControlPositionClass: string | undefined;\r\n    _transitionDuration!:number;\r\n    _doubleTap!:boolean;\r\n    _doubleTapScale!:number;\r\n    _autoZoomOut!:boolean;\r\n    _limitZoom!:number | \"original image size\";\r\n\r\n    @Input('properties') set properties(value: ComponentProperties) {\r\n        if (value) {\r\n            this._properties = value;\r\n        }\r\n    }\r\n    get properties() {\r\n        return this._properties;\r\n    }\r\n\r\n    // transitionDuration\r\n    @Input('transition-duration') set transitionDurationBackwardCompatibility(value: number) {\r\n        if (value) {\r\n            this._transitionDuration = value;\r\n        }\r\n    }\r\n    @Input('transitionDuration') set transitionDuration(value: number) {\r\n        if (value) {\r\n            this._transitionDuration = value;\r\n        }\r\n    }\r\n    get transitionDuration() {\r\n        return this._transitionDuration;\r\n    }\r\n\r\n    // doubleTap\r\n    @Input('double-tap') set doubleTapBackwardCompatibility(value: boolean) {\r\n        if (value) {\r\n            this._doubleTap = value;\r\n        }\r\n    }\r\n    @Input('doubleTap') set doubleTap(value: boolean) {\r\n        if (value) {\r\n            this._doubleTap = value;\r\n        }\r\n    }\r\n    get doubleTap() {\r\n        return this._doubleTap;\r\n    }\r\n\r\n    // doubleTapScale\r\n    @Input('double-tap-scale') set doubleTapScaleBackwardCompatibility(value: number) {\r\n        if (value) {\r\n            this._doubleTapScale = value;\r\n        }\r\n    }\r\n    @Input('doubleTapScale') set doubleTapScale(value: number) {\r\n        if (value) {\r\n            this._doubleTapScale = value;\r\n        }\r\n    }\r\n    get doubleTapScale() {\r\n        return this._doubleTapScale;\r\n    }\r\n\r\n    // autoZoomOut\r\n    @Input('auto-zoom-out') set autoZoomOutBackwardCompatibility(value: boolean) {\r\n        if (value) {\r\n            this._autoZoomOut = value;\r\n        }\r\n    }\r\n    @Input('autoZoomOut') set autoZoomOut(value: boolean) {\r\n        if (value) {\r\n            this._autoZoomOut = value;\r\n        }\r\n    }\r\n    get autoZoomOut() {\r\n        return this._autoZoomOut;\r\n    }\r\n\r\n    // limitZoom\r\n    @Input('limit-zoom') set limitZoomBackwardCompatibility(value: number | \"original image size\") {\r\n        if (value) {\r\n            this._limitZoom = value;\r\n        }\r\n    }\r\n    @Input('limitZoom') set limitZoom(value: number | \"original image size\") {\r\n        if (value) {\r\n            this._limitZoom = value;\r\n        }\r\n    }\r\n    get limitZoom() {\r\n        return this._limitZoom;\r\n    }\r\n\r\n    @Input() disabled!: boolean;\r\n    @Input() disablePan!: boolean;\r\n    @Input() overflow!: \"hidden\" | \"visible\";\r\n    @Input() zoomControlScale!: number;\r\n    @Input() disableZoomControl!: \"disable\" | \"never\" | \"auto\";\r\n    @Input() backgroundColor!: string;\r\n    @Input() limitPan!: boolean;\r\n    @Input() minPanScale!: number;\r\n    @Input() minScale!: number;\r\n    @Input() listeners!: 'auto' | 'mouse and touch';\r\n    @Input() wheel!: boolean;\r\n    @Input() autoHeight!: boolean;\r\n    @Input() wheelZoomFactor!: number;\r\n    @Input() draggableImage!: boolean;\r\n\r\n    @HostBinding('style.overflow')\r\n    get hostOverflow() {\r\n        return this.properties['overflow'];\r\n    }\r\n    @HostBinding('style.background-color')\r\n    get hostBackgroundColor() {\r\n        return this.properties['backgroundColor'];\r\n    }\r\n\r\n    get isTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query:any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n    get isDragging() {\r\n        return this.pinchZoom ? this.pinchZoom.isDragging() : undefined;\r\n    }\r\n\r\n    get isDisabled() {\r\n        return this.properties['disabled'];\r\n    }\r\n\r\n    get scale() {\r\n        return this.pinchZoom.scale;\r\n    }\r\n\r\n    get isZoomedIn() {\r\n        return this.scale > 1;\r\n    }\r\n\r\n    get scaleLevel() {\r\n        return Math.round(this.scale / this._zoomControlScale);\r\n    }\r\n\r\n    get maxScale() {\r\n        return this.pinchZoom.maxScale;\r\n    }\r\n\r\n    get isZoomLimitReached() {\r\n        return this.scale >= this.maxScale;\r\n    }\r\n\r\n    get _zoomControlScale() {\r\n        return this.getPropertiesValue('zoomControlScale');\r\n    }\r\n\r\n   constructor(private elementRef: ElementRef) {\r\n        this.defaultComponentProperties = this.getDefaultComponentProperties();\r\n        this.applyPropertiesDefault(this.defaultComponentProperties, {});\r\n    }\r\n\r\n    ngOnInit(){\r\n        this.initPinchZoom();\r\n        \r\n        /* Calls the method until the image size is available */\r\n        this.detectLimitZoom();\r\n    }\r\n\r\n    ngOnChanges(changes:SimpleChanges) {\r\n        let changedProperties = this.getProperties(changes);\r\n        changedProperties = this.renameProperties(changedProperties);\r\n\r\n        this.applyPropertiesDefault(this.defaultComponentProperties, changedProperties);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    initPinchZoom() {\r\n        if (this.properties['disabled']) {\r\n            return;\r\n        }\r\n\r\n        this.properties['element'] = this.elementRef.nativeElement.querySelector('.pinch-zoom-content');\r\n        this.pinchZoom = new IvyPinch(this.properties);\r\n    }\r\n\r\n    getProperties(changes:SimpleChanges) {\r\n        let properties:any = {};\r\n\r\n        for (var prop in changes) {\r\n            if (prop !== 'properties'){\r\n                properties[prop] = changes[prop].currentValue;\r\n            }\r\n            if (prop === 'properties'){\r\n                properties = changes[prop].currentValue;\r\n            }\r\n        }\r\n        return properties;\r\n    }\r\n\r\n    renameProperties(properties: any) {\r\n        for (var prop in properties) {\r\n            if (backwardCompatibilityProperties[prop]) {\r\n                properties[backwardCompatibilityProperties[prop]] = properties[prop];\r\n                delete properties[prop];\r\n            }\r\n        }\r\n\r\n        return properties;\r\n    }\r\n\r\n    applyPropertiesDefault(defaultProperties:ComponentProperties, properties:ComponentProperties): void {\r\n        this.properties = Object.assign({}, defaultProperties, properties);\r\n    }\r\n\r\n    toggleZoom() {\r\n        this.pinchZoom.toggleZoom();\r\n    }\r\n\r\n    isControl() {\r\n        if (this.isDisabled) {\r\n            return false;\r\n        }\r\n\r\n        if (this.properties['disableZoomControl'] === \"disable\") {\r\n            return false;\r\n        }\r\n\r\n        if (this.isTouchScreen && this.properties['disableZoomControl'] === \"auto\") {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    detectLimitZoom() {\r\n        if (this.pinchZoom) {\r\n            this.pinchZoom.detectLimitZoom();\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.pinchZoom.destroy();\r\n    }\r\n\r\n    getPropertiesValue(propertyName:PropertyName) {\r\n        if (this.properties && this.properties[propertyName]) {\r\n            return this.properties[propertyName]\r\n        } else {\r\n            return this.defaultComponentProperties[propertyName];\r\n        }\r\n    }\r\n\r\n    getDefaultComponentProperties() {\r\n        return {...defaultProperties, ..._defaultComponentProperties};\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PinchZoomComponent } from './pinch-zoom.component';\n\n@NgModule({\n    declarations: [\n        PinchZoomComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        PinchZoomComponent\n    ],\n    providers: [\n\n    ],\n    bootstrap: [\n        \n    ],\n    entryComponents: [\n        PinchZoomComponent\n    ]\n})\nexport class PinchZoomModule { }\n"]}