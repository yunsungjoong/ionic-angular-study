import { ElementRef, OnDestroy, SimpleChanges } from '@angular/core';
import { Properties } from './interfaces';
import * as ɵngcc0 from '@angular/core';
interface ComponentProperties extends Properties {
    disabled?: boolean;
    overflow?: "hidden" | "visible";
    disableZoomControl?: "disable" | "never" | "auto";
    backgroundColor?: string;
}
export declare const _defaultComponentProperties: ComponentProperties;
declare type PropertyName = keyof ComponentProperties;
export declare class PinchZoomComponent implements OnDestroy {
    private elementRef;
    pinchZoom: any;
    _properties: ComponentProperties;
    defaultComponentProperties: ComponentProperties;
    zoomControlPositionClass: string | undefined;
    _transitionDuration: number;
    _doubleTap: boolean;
    _doubleTapScale: number;
    _autoZoomOut: boolean;
    _limitZoom: number | "original image size";
    set properties(value: ComponentProperties);
    get properties(): ComponentProperties;
    set transitionDurationBackwardCompatibility(value: number);
    set transitionDuration(value: number);
    get transitionDuration(): number;
    set doubleTapBackwardCompatibility(value: boolean);
    set doubleTap(value: boolean);
    get doubleTap(): boolean;
    set doubleTapScaleBackwardCompatibility(value: number);
    set doubleTapScale(value: number);
    get doubleTapScale(): number;
    set autoZoomOutBackwardCompatibility(value: boolean);
    set autoZoomOut(value: boolean);
    get autoZoomOut(): boolean;
    set limitZoomBackwardCompatibility(value: number | "original image size");
    set limitZoom(value: number | "original image size");
    get limitZoom(): number | "original image size";
    disabled: boolean;
    disablePan: boolean;
    overflow: "hidden" | "visible";
    zoomControlScale: number;
    disableZoomControl: "disable" | "never" | "auto";
    backgroundColor: string;
    limitPan: boolean;
    minPanScale: number;
    minScale: number;
    listeners: 'auto' | 'mouse and touch';
    wheel: boolean;
    autoHeight: boolean;
    wheelZoomFactor: number;
    draggableImage: boolean;
    get hostOverflow(): VisibilityState;
    get hostBackgroundColor(): string;
    get isTouchScreen(): boolean;
    get isDragging(): any;
    get isDisabled(): boolean;
    get scale(): any;
    get isZoomedIn(): boolean;
    get scaleLevel(): number;
    get maxScale(): any;
    get isZoomLimitReached(): boolean;
    get _zoomControlScale(): any;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    initPinchZoom(): void;
    getProperties(changes: SimpleChanges): any;
    renameProperties(properties: any): any;
    applyPropertiesDefault(defaultProperties: ComponentProperties, properties: ComponentProperties): void;
    toggleZoom(): void;
    isControl(): boolean;
    detectLimitZoom(): void;
    destroy(): void;
    getPropertiesValue(propertyName: PropertyName): any;
    getDefaultComponentProperties(): {
        disabled?: boolean;
        overflow?: VisibilityState;
        disableZoomControl?: "auto" | "disable" | "never";
        backgroundColor?: string;
        element?: string;
        doubleTap?: boolean;
        doubleTapScale?: number;
        zoomControlScale?: number;
        transitionDuration?: number;
        autoZoomOut?: boolean;
        limitZoom?: string | number;
        disablePan?: boolean;
        limitPan?: boolean;
        minPanScale?: number;
        minScale?: number;
        eventHandler?: any;
        listeners?: string;
        wheel?: boolean;
        fullImage?: {
            path: string;
            minScale?: number;
        };
        autoHeight?: boolean;
        wheelZoomFactor?: number;
        draggableImage?: boolean;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PinchZoomComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PinchZoomComponent, "pinch-zoom, [pinch-zoom]", ["pinchZoom"], { "properties": "properties"; "transitionDurationBackwardCompatibility": "transition-duration"; "transitionDuration": "transitionDuration"; "doubleTapBackwardCompatibility": "double-tap"; "doubleTap": "doubleTap"; "doubleTapScaleBackwardCompatibility": "double-tap-scale"; "doubleTapScale": "doubleTapScale"; "autoZoomOutBackwardCompatibility": "auto-zoom-out"; "autoZoomOut": "autoZoomOut"; "limitZoomBackwardCompatibility": "limit-zoom"; "limitZoom": "limitZoom"; "disabled": "disabled"; "disablePan": "disablePan"; "overflow": "overflow"; "zoomControlScale": "zoomControlScale"; "disableZoomControl": "disableZoomControl"; "backgroundColor": "backgroundColor"; "limitPan": "limitPan"; "minPanScale": "minPanScale"; "minScale": "minScale"; "listeners": "listeners"; "wheel": "wheel"; "autoHeight": "autoHeight"; "wheelZoomFactor": "wheelZoomFactor"; "draggableImage": "draggableImage"; }, {}, never, ["*"]>;
}
export {};

//# sourceMappingURL=pinch-zoom.component.d.ts.map