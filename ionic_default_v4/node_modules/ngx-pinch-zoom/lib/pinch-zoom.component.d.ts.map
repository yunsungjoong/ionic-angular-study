{"version":3,"file":"pinch-zoom.component.d.ts","sources":["pinch-zoom.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { Properties } from './interfaces';\r\ninterface ComponentProperties extends Properties {\r\n    disabled?: boolean;\r\n    overflow?: \"hidden\" | \"visible\";\r\n    disableZoomControl?: \"disable\" | \"never\" | \"auto\";\r\n    backgroundColor?: string;\r\n}\r\nexport declare const _defaultComponentProperties: ComponentProperties;\r\ndeclare type PropertyName = keyof ComponentProperties;\r\nexport declare class PinchZoomComponent implements OnDestroy {\r\n    private elementRef;\r\n    pinchZoom: any;\r\n    _properties: ComponentProperties;\r\n    defaultComponentProperties: ComponentProperties;\r\n    zoomControlPositionClass: string | undefined;\r\n    _transitionDuration: number;\r\n    _doubleTap: boolean;\r\n    _doubleTapScale: number;\r\n    _autoZoomOut: boolean;\r\n    _limitZoom: number | \"original image size\";\r\n    set properties(value: ComponentProperties);\r\n    get properties(): ComponentProperties;\r\n    set transitionDurationBackwardCompatibility(value: number);\r\n    set transitionDuration(value: number);\r\n    get transitionDuration(): number;\r\n    set doubleTapBackwardCompatibility(value: boolean);\r\n    set doubleTap(value: boolean);\r\n    get doubleTap(): boolean;\r\n    set doubleTapScaleBackwardCompatibility(value: number);\r\n    set doubleTapScale(value: number);\r\n    get doubleTapScale(): number;\r\n    set autoZoomOutBackwardCompatibility(value: boolean);\r\n    set autoZoomOut(value: boolean);\r\n    get autoZoomOut(): boolean;\r\n    set limitZoomBackwardCompatibility(value: number | \"original image size\");\r\n    set limitZoom(value: number | \"original image size\");\r\n    get limitZoom(): number | \"original image size\";\r\n    disabled: boolean;\r\n    disablePan: boolean;\r\n    overflow: \"hidden\" | \"visible\";\r\n    zoomControlScale: number;\r\n    disableZoomControl: \"disable\" | \"never\" | \"auto\";\r\n    backgroundColor: string;\r\n    limitPan: boolean;\r\n    minPanScale: number;\r\n    minScale: number;\r\n    listeners: 'auto' | 'mouse and touch';\r\n    wheel: boolean;\r\n    autoHeight: boolean;\r\n    wheelZoomFactor: number;\r\n    draggableImage: boolean;\r\n    get hostOverflow(): VisibilityState;\r\n    get hostBackgroundColor(): string;\r\n    get isTouchScreen(): boolean;\r\n    get isDragging(): any;\r\n    get isDisabled(): boolean;\r\n    get scale(): any;\r\n    get isZoomedIn(): boolean;\r\n    get scaleLevel(): number;\r\n    get maxScale(): any;\r\n    get isZoomLimitReached(): boolean;\r\n    get _zoomControlScale(): any;\r\n    constructor(elementRef: ElementRef);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    initPinchZoom(): void;\r\n    getProperties(changes: SimpleChanges): any;\r\n    renameProperties(properties: any): any;\r\n    applyPropertiesDefault(defaultProperties: ComponentProperties, properties: ComponentProperties): void;\r\n    toggleZoom(): void;\r\n    isControl(): boolean;\r\n    detectLimitZoom(): void;\r\n    destroy(): void;\r\n    getPropertiesValue(propertyName: PropertyName): any;\r\n    getDefaultComponentProperties(): {\r\n        disabled?: boolean;\r\n        overflow?: VisibilityState;\r\n        disableZoomControl?: \"auto\" | \"disable\" | \"never\";\r\n        backgroundColor?: string;\r\n        element?: string;\r\n        doubleTap?: boolean;\r\n        doubleTapScale?: number;\r\n        zoomControlScale?: number;\r\n        transitionDuration?: number;\r\n        autoZoomOut?: boolean;\r\n        limitZoom?: string | number;\r\n        disablePan?: boolean;\r\n        limitPan?: boolean;\r\n        minPanScale?: number;\r\n        minScale?: number;\r\n        eventHandler?: any;\r\n        listeners?: string;\r\n        wheel?: boolean;\r\n        fullImage?: {\r\n            path: string;\r\n            minScale?: number;\r\n        };\r\n        autoHeight?: boolean;\r\n        wheelZoomFactor?: number;\r\n        draggableImage?: boolean;\r\n    };\r\n}\r\nexport {};\r\n"]}